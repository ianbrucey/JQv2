# Enhanced Draft System Agent Guidelines
# Version 2.0 - User Onboarding and Workflow Management System

## System Overview
You are working within the draft_system, a professional legal document generation system that uses a unified HTML-first workflow. This system generates court-ready PDF and Word documents from standardized markdown content.

## CRITICAL: Initial User Interaction Protocol
**BEFORE starting any work, you MUST determine the user's workflow mode:**

### Mode Detection Process
1. **Assess User Experience Level**
   - Ask about legal document drafting experience
   - Determine familiarity with draft_system
   - Identify current case status (new vs. existing)

2. **Present Mode Options**
   - Explain both Guided Mode and Freehand Mode
   - Provide clear examples of when each is appropriate
   - Allow user to choose or recommend based on assessment

3. **Confirm Mode Selection**
   - Document chosen mode in Case_Summary_and_Timeline.md
   - Set appropriate agent behavior for selected mode
   - Inform user they can switch modes at any time

## WORKFLOW MODES

### **GUIDED MODE (Structured Workflow)**
**Target Audience**: New users, complex cases, users preferring step-by-step guidance

**Agent Behavior in Guided Mode**:
- Lead the conversation with structured questions
- Provide educational explanations for each step
- Offer multiple options with recommendations
- Validate understanding before proceeding
- Create all folder structures automatically
- Provide progress tracking and next-step indicators
- Include quality checkpoints at each phase

**Workflow Phases**:
1. **Pre-Draft Setup**: Case initiation and folder creation
2. **Research and Analysis**: Guided legal research and fact development
3. **Content Creation**: Section-by-section drafting with explanations
4. **Document Generation**: Validation, preview, and final generation
5. **Quality Assurance**: Review and finalization with educational components

### **FREEHAND MODE (Expert/Flexible Workflow)**
**Target Audience**: Experienced users, quick tasks, users familiar with draft_system

**Agent Behavior in Freehand Mode**:
- Respond to user-directed requests
- Provide minimal explanations unless requested
- Assume familiarity with standards and processes
- Offer quick-start options for common entry points
- Maintain quality standards without extensive guidance
- Provide validation feedback without educational content

**Common Entry Points**:
- "I have research and want to draft [document type]"
- "I need to add a motion to existing case"
- "Generate final documents for [document folder]"
- "Validate and fix formatting for [document]"

## MODE-SPECIFIC WORKFLOWS

### **Guided Mode: Brand New Case Workflow**

#### **Phase 1: Pre-Draft Setup and Case Initiation**
**Agent Actions**:
1. **Welcome and Orientation**
   ```
   "Welcome to the draft_system! I'll guide you through creating a professional legal case from start to finish. 
   
   First, let me create your case folder structure and gather the essential information we'll need."
   ```

2. **Case Setup Interview**
   - Ask structured questions about case basics
   - Gather party information, court preferences, case type
   - Collect preliminary documents and evidence
   - Create complete folder structure automatically

3. **Educational Components**
   - Explain folder structure and purpose
   - Introduce draft_system standards and quality requirements
   - Preview the complete workflow and timeline

#### **Phase 2: Research and Analysis Phase**
**Agent Actions**:
1. **Research Planning**
   ```
   "Now let's develop the legal foundation for your case. I'll guide you through:
   - Identifying applicable laws and regulations
   - Researching relevant case precedents
   - Organizing your facts and evidence
   - Planning your legal strategy"
   ```

2. **Guided Research Process**
   - Suggest research topics based on case facts
   - Provide templates for research organization
   - Explain legal concepts and requirements
   - Help organize evidence by legal theory

3. **Quality Checkpoints**
   - Review research completeness
   - Validate legal theories and supporting evidence
   - Confirm strategy before proceeding to drafting

#### **Phase 3: Content Creation Phase**
**Agent Actions**:
1. **Document Planning**
   ```
   "Let's plan your [document type]. I'll help you:
   - Choose the right document structure
   - Plan each section and its purpose
   - Organize your arguments effectively
   - Ensure all required elements are included"
   ```

2. **Section-by-Section Guidance**
   - Explain purpose and requirements for each section
   - Provide examples and templates
   - Guide content development with legal standards
   - Ensure proper cross-referencing and formatting

3. **Educational Elements**
   - Explain legal writing principles
   - Teach proper citation formatting
   - Demonstrate cross-reference system
   - Show quality standards in action

#### **Phase 4: Document Generation Phase**
**Agent Actions**:
1. **Validation and Quality Assurance**
   ```
   "Let's ensure your document meets all professional standards:
   - Checking formatting compliance
   - Validating cross-references
   - Reviewing legal citations
   - Confirming document structure"
   ```

2. **Preview and Review Process**
   - Generate HTML preview with explanation
   - Guide review process with checklist
   - Explain what to look for in quality review
   - Address any issues found

3. **Final Generation**
   - Generate final PDF and Word documents
   - Explain output locations and naming
   - Provide next steps for filing or service

#### **Phase 5: Quality Assurance and Next Steps**
**Agent Actions**:
1. **Comprehensive Review**
   - Guide final document review process
   - Provide quality assurance checklist
   - Explain court-specific requirements
   - Confirm readiness for filing

2. **Case Management Updates**
   - Update Case_Summary_and_Timeline.md
   - Document lessons learned and preferences
   - Plan next steps and deadlines
   - Prepare for future documents

### **Freehand Mode: Flexible Entry Points**

#### **Quick-Start Options**
**Agent provides menu of common entry points**:
```
"I can help you with:
1. Start new case from scratch
2. Add document to existing case  
3. Generate final documents from existing drafts
4. Validate and fix document formatting
5. Research specific legal issue
6. Create document outline
7. Other (please specify)"
```

#### **Existing Case with New Document**
**Agent Actions**:
1. **Context Review**
   - Read Case_Summary_and_Timeline.md
   - Identify relevant existing materials
   - Confirm new document requirements

2. **Efficient Integration**
   - Create new document folder structure
   - Plan reallegation strategy
   - Leverage existing research and facts
   - Focus on document-specific requirements

3. **Streamlined Generation**
   - Minimal validation explanations
   - Quick preview and review
   - Direct final document generation

## CORE WORKFLOW (BOTH MODES)
The system uses a streamlined 3-step process:

### Step 1: Validate and Fix
```bash
# ALWAYS activate virtual environment first
source venv/bin/activate

python scripts/format_validator.py active_drafts/document_folder/ standard
python scripts/format_fixer.py active_drafts/document_folder/
```

### Step 2: Generate Preview (Manual HTML Creation)
```
AI Agent manually creates HTML preview using str-replace-editor tool
Output location: active_drafts/[draft_type]/html_preview/[document]-preview.html
DEPRECATED: universal_preview_generator.py script is no longer used
```

### Step 3: Generate Finals
```bash
python scripts/generate_final_document.py active_drafts/document_folder/ both
# Outputs to: final_documents/name_YYYYMMDD_HHMMSS.pdf and .docx
```

## MODE SWITCHING
**Users can switch modes at any time**:
- **To Guided**: "I'd like more guidance on this step"
- **To Freehand**: "I'm familiar with this process, let's move quickly"
- **Agent Response**: Acknowledge switch and adjust behavior immediately

## QUALITY STANDARDS (BOTH MODES)
**All modes maintain identical quality requirements**:
- All paragraphs use `**number.**` format
- All cross-references resolve to valid labels
- All headers follow H1/H2/H3 hierarchy only
- All legal citations properly formatted
- Professional legal tone throughout

**Mode Differences in Quality Assurance**:
- **Guided Mode**: Detailed explanations of why standards exist
- **Freehand Mode**: Quick validation feedback without extensive explanations

## CONTEXT PRESERVATION (BOTH MODES)
**Always maintain case continuity**:
- Read Case_Summary_and_Timeline.md before starting work
- Update timeline after significant events
- Document user preferences and successful patterns
- Maintain agent context notes for future sessions

## EMERGENCY PROCEDURES (BOTH MODES)
**If user seems confused or lost**:
1. Offer to switch to Guided Mode
2. Provide quick orientation to current status
3. Offer step-by-step assistance
4. Reference documentation and help resources

**If standards conflict**:
1. Refer to standards/markdown_formatting_guide.md
2. Choose most conservative/formal option
3. Explain reasoning in mode-appropriate detail

This enhanced system ensures the draft_system is accessible to users of all experience levels while maintaining the highest standards of legal document quality and professional formatting.

## DOCUMENT PROCESSING SYSTEM

### **Document Upload and Processing Workflow**

When users upload documents to `Intake/preliminary_docs/` or any other folder, AI agents must follow this systematic processing approach:

#### **Step 1: Document Assessment**
1. **Identify Document Type**:
   - PDF files (text-based or scanned)
   - Image files (JPG, PNG, TIFF, etc.)
   - Word documents (.docx, .doc)
   - Text files (.txt, .md)
   - Other formats (Excel, PowerPoint, etc.)

2. **Determine Processing Method**:
   - Text-based PDFs → Direct text extraction
   - Scanned PDFs/Images → OCR processing
   - Word documents → Text extraction
   - Unknown/unclear destination → Temporary processing area

#### **Step 2: Two-Tier PDF Processing System**

**Primary Method: PDF-to-Text Extraction**
```python
# Use PyPDF2 or similar for text-based PDFs
import PyPDF2
def extract_pdf_text(pdf_path):
    with open(pdf_path, 'rb') as file:
        reader = PyPDF2.PdfReader(file)
        text = ""
        for page in reader.pages:
            text += page.extract_text()
    return text
```

**Fallback Method: Tesseract OCR**
```python
# Use when PDF text extraction fails or returns minimal text
import pytesseract
from PIL import Image
import pdf2image

def ocr_pdf(pdf_path):
    pages = pdf2image.convert_from_path(pdf_path)
    text = ""
    for page in pages:
        text += pytesseract.image_to_string(page)
    return text
```

**Decision Logic**:
- If PDF text extraction returns < 100 characters → Use OCR
- If PDF text extraction returns garbled/encoded text → Use OCR
- If PDF is image-based (scanned) → Use OCR directly

#### **Step 3: Image Processing**
For image files (JPG, PNG, TIFF, etc.):
```python
def process_image(image_path):
    image = Image.open(image_path)
    # Preprocessing for better OCR results
    image = image.convert('L')  # Convert to grayscale
    text = pytesseract.image_to_string(image)
    return text
```

#### **Step 4: Document Classification and Routing**

**Classification Categories**:
1. **Legal Documents**: Contracts, court filings, correspondence
2. **Evidence**: Photos, receipts, records, communications
3. **Research Materials**: Case law, statutes, articles
4. **Administrative**: Forms, applications, notices

**Routing Logic**:
- **Clear Legal Documents** → `active_drafts/[relevant_document]/exhibits/`
- **General Evidence** → `exhibits_master/`
- **Research Materials** → `case_resources/[appropriate_subfolder]/`
- **Unclear/Mixed** → `Intake/preliminary_docs/processed/` (temporary holding)

#### **Step 5: Three-File System Implementation**

For each processed document, create:

1. **Original File**: `[name]_original.[ext]`
   - Preserve original document unchanged
   - Maintain original filename and metadata

2. **Extracted Text**: `[name]_text.txt`
   - Clean, formatted text extraction
   - Remove excessive whitespace and formatting artifacts
   - Preserve paragraph structure where possible

3. **Summary File**: `[name]_summary.md`
   - Document description and analysis
   - Legal relevance assessment
   - Key points extraction
   - Cross-reference suggestions

### **Document Processing Templates**

#### **Summary Template for Legal Documents**:
```markdown
# Document Summary: [Document Name]

## Document Information
- **Original Filename**: [filename]
- **Document Type**: [Contract/Court Filing/Correspondence/etc.]
- **Date**: [document date if available]
- **Source**: [where obtained]
- **Processing Date**: [current date]
- **Processing Method**: [Text Extraction/OCR/Manual]

## Content Summary
[2-3 sentence summary of document contents]

## Legal Relevance
[How this document relates to the case - claims, defenses, evidence]

## Key Information Extracted
- **Parties**: [names mentioned]
- **Dates**: [important dates]
- **Amounts**: [monetary amounts if any]
- **Legal Issues**: [legal concepts or claims mentioned]

## Recommended Actions
- [ ] [Suggested next steps]
- [ ] [Additional research needed]
- [ ] [Cross-reference with other documents]

## Cross-References
- **Related Documents**: [other exhibits or documents]
- **Supports Claims**: [which legal arguments this supports]
- **Contradicts**: [any conflicting information]
```

#### **Summary Template for Evidence**:
```markdown
# Evidence Summary: [Document Name]

## Document Information
- **Original Filename**: [filename]
- **Evidence Type**: [Photo/Receipt/Record/Communication/etc.]
- **Date**: [when evidence was created]
- **Source**: [where obtained]
- **Processing Date**: [current date]

## Description
[What this evidence shows or proves]

## Relevance to Case
[How this evidence supports legal arguments]

## Authentication Notes
[Information needed to authenticate this evidence in court]

## Key Details
- [Important detail 1]
- [Important detail 2]
- [Important detail 3]

## Recommended Use
[How this evidence should be used in legal documents]
```

### **Quality Control and Validation**

#### **Text Extraction Validation**:
1. **Length Check**: Extracted text should be reasonable length
2. **Readability Check**: Text should be coherent and readable
3. **Completeness Check**: Compare with original document visually
4. **Character Encoding**: Ensure proper UTF-8 encoding

#### **OCR Quality Assessment**:
1. **Confidence Scoring**: Use OCR confidence metrics when available
2. **Manual Review**: Flag low-confidence extractions for review
3. **Error Patterns**: Identify common OCR errors (0/O, 1/l, etc.)
4. **Formatting Preservation**: Maintain document structure where possible

### **Error Handling and Fallbacks**

#### **Processing Failures**:
1. **PDF Extraction Fails** → Try OCR → Manual review if needed
2. **OCR Fails** → Flag for manual processing
3. **Unknown Format** → Convert to PDF if possible → Process as PDF
4. **Corrupted Files** → Request re-upload from user

#### **Quality Issues**:
1. **Poor OCR Results** → Try image preprocessing → Manual review
2. **Incomplete Extraction** → Combine multiple methods
3. **Formatting Loss** → Preserve structure in summary file
4. **Large Files** → Process in chunks → Combine results

### **Automation and Batch Processing**

#### **Batch Processing Workflow**:
1. **Scan Folders**: Regularly check for new uploads
2. **Process Queue**: Handle documents in upload order
3. **Status Tracking**: Maintain processing status log
4. **Error Reporting**: Generate reports for failed processing
5. **User Notification**: Inform user of processing completion

#### **Integration with Case Management**:
1. **Update Case Timeline**: Add document processing events
2. **Cross-Reference Updates**: Link processed documents to relevant sections
3. **Exhibit Lists**: Maintain master exhibit lists
4. **Search Indexing**: Make processed text searchable

This document processing system ensures consistent, high-quality handling of all uploaded materials while maintaining the three-file structure and proper organization throughout the case management system.

## CRITICAL: DOWNLOADABLE DOCUMENT PROCESSING

### **When User Requests "Downloadable File" or "Make [Document] Ready for Download"**

**STRICT REQUIREMENT**: This means process the ACTUAL document content through the established framework. Do NOT create templates, examples, or instructional content.

#### **Required Steps for Document Processing**:

1. **Parse Source Content**: Extract all text, structure, and formatting from the provided document
2. **Create Active Draft Structure**: Set up standardized folder structure in active_drafts/ with all required subfolders
3. **Populate Draft Content Files**: Break down parsed content into appropriate numbered markdown files following established structure
4. **Generate Final Output**: Use existing workflow to produce downloadable document

#### **Specific Workflow for Motion Documents**:
```bash
# 1. Create folder structure
active_drafts/motion_[name]/
├── draft_content/
│   ├── 01_caption_and_title.md
│   ├── 02_introduction.md
│   ├── 03_statement_of_facts.md
│   ├── 04_legal_standard.md
│   ├── 05_argument.md
│   └── 06_conclusion.md
├── research/
├── exhibits/
├── reference_material/
├── case_documents/
└── metadata.yml

# 2. Parse and distribute actual content across files
# 3. Run generation workflow
python scripts/format_validator.py active_drafts/motion_[name]/ standard
# Manual HTML preview creation by AI agent in: active_drafts/motion_[name]/html_preview/
python scripts/generate_final_document.py active_drafts/motion_[name]/ both
```

#### **What NOT to Do When User Requests Downloadable Document**:
- ❌ Create template files with placeholders
- ❌ Create README or instructional files
- ❌ Create example content
- ❌ Explain the system instead of using it
- ❌ Ask for clarification when content is provided

#### **What TO Do**:
- ✅ Parse the actual provided document content
- ✅ Use the established framework strictly
- ✅ Create proper active draft structure
- ✅ Generate actual downloadable output (HTML/PDF/Word)
- ✅ Follow the defined workflow exactly

**FRAMEWORK COMPLIANCE**: The system framework is defined and must be followed strictly. When users provide content and request downloadable documents, process their actual content through the established workflow.

## HTML PREVIEW STANDARDS AND WORKFLOW

### **Manual HTML Preview Process**

**ALWAYS use manual HTML preview generation (AI agent directly editing HTML files):**

1. **Create/Edit Markdown Files** → Update source content in `active_drafts/[draft_type]/draft_content/`
2. **Manual HTML Generation** → Use `str-replace-editor` tool to create/update HTML files in `active_drafts/[draft_type]/html_preview/`
3. **Maintain Consistency** → Ensure all changes are reflected across both markdown and HTML versions

### **HTML Preview Folder Structure**

**Each draft type must have its own html_preview folder:**

```
active_drafts/
├── motion_lift_stay/
│   ├── draft_content/
│   ├── html_preview/          ← Individual HTML preview folder
│   │   ├── motion-preview.html
│   │   └── declaration-preview.html
│   ├── exhibits/
│   └── metadata.yml
├── complaint_amended_hmi/
│   ├── draft_content/
│   ├── html_preview/          ← Individual HTML preview folder
│   │   └── complaint-preview.html
│   └── metadata.yml
```

### **Creating New Draft Types**

**When users request new draft types, use this standardized language:**

*"To set up a new [document_type] draft, please use this language: 'Set up a new [document_type] draft with the standard folder structure including html_preview folder.'"*

**Standard folder structure for new draft types:**
```
active_drafts/[new_draft_type]/
├── draft_content/
├── html_preview/              ← Always include this folder
├── research/
├── exhibits/
├── reference_material/
├── case_documents/
└── metadata.yml
```

### **IMPORTANT: HTML PREVIEW FOLDER STRUCTURE CHANGE**

**NEW (Current)**: Individual html_preview folders within each draft type
```
active_drafts/[draft_type]/html_preview/[document]-preview.html
```

**DEPRECATED**: Root-level html_preview folder
```
html_preview/draft-preview.html  ← DO NOT USE
```

### **HTML Preview Page Numbering Standards**

**Use ONLY this method for page numbering in HTML previews:**

```css
@page {
    margin: 1in;
    size: letter;
    @bottom-right {
        content: counter(page);
        font-family: "Times New Roman", serif;
        font-size: 12pt;
    }
}
```

### **Implementation Requirements**

- ✅ **Always use** `@page` with `@bottom-right` for page numbering
- ❌ **Never use** `@media print` with `body::after` for page numbering
- ✅ **Browser compatibility**: Works correctly in Chrome, Edge, Safari, and Firefox
- ✅ **Print quality**: Produces clean page numbers without artifacts

## HTML PREVIEW FOLDER STRUCTURE

### **Standard Draft Type Folder Structure**

Each draft type in `active_drafts/` must follow this standardized structure:

```
active_drafts/[draft_type_name]/
├── draft_content/           # Markdown content files
├── html_preview/           # HTML preview files (REQUIRED)
├── research/               # Research materials
├── exhibits/              # Exhibit files
├── reference_material/    # Reference documents
├── case_documents/        # Case-related documents
└── metadata.yml          # Document metadata
```

### **HTML Preview Folder Requirements**

- ✅ **Location**: `active_drafts/[draft_type]/html_preview/`
- ✅ **Purpose**: Contains HTML preview files for the specific draft type
- ✅ **Naming**: Use descriptive names (e.g., `motion-preview.html`, `complaint-preview.html`)
- ✅ **Isolation**: Each draft type has its own HTML preview folder
- ❌ **Never use**: Root-level `html_preview/` folder (deprecated)

### **Creating New Draft Types - User Instructions**

When users request new draft types, provide them with this standardized language:

**"To create a new draft type, I'll set up the standard folder structure with the following components:**
- **draft_content/**: Organized markdown files for your document sections
- **html_preview/**: Professional HTML previews ready for download/printing
- **exhibits/**: Storage for supporting documents and attachments
- **research/**: Legal research and supporting materials
- **reference_material/**: Templates and reference documents
- **case_documents/**: Case-specific files and correspondence
- **metadata.yml**: Document tracking and generation settings

**This structure ensures professional document organization and enables seamless HTML preview generation for court-ready documents."**

### **AI Agent Implementation Process**

When creating new draft types:

1. **Create folder structure**:
   ```bash
   mkdir -p active_drafts/[draft_type_name]/{draft_content,html_preview,research,exhibits,reference_material,case_documents}
   ```

2. **Create metadata.yml** with proper document type classification

3. **Set up draft_content/** with appropriate markdown files for the document type

4. **Create HTML previews MANUALLY** in the `html_preview/` subfolder using str-replace-editor tool with standard CSS and page numbering

5. **Document the new type** in README.md if it represents a new category

### **MANUAL HTML GENERATION REQUIREMENTS**

**CRITICAL**: All HTML preview generation must be done manually by the AI agent using the str-replace-editor tool.

- ❌ **Never use**: `universal_preview_generator.py` script (deprecated)
- ✅ **Always use**: Manual HTML creation with str-replace-editor tool
- ✅ **Location**: `active_drafts/[draft_type]/html_preview/[document]-preview.html`
- ✅ **Standards**: Use standard CSS with `@page` page numbering method
- ✅ **Formatting**: Times New Roman, 14pt, double-spaced, 1-inch margins
- ✅ **Border**: Light grey border for screen viewing (removed when printing)


# Legal Document Generation System

## Overview

The draft_system is a professional legal document generation system that creates court-ready PDF and Word documents from standardized markdown content. It uses a streamlined HTML-first workflow for consistent, high-quality legal documents.

## Template Repository Setup

This repository serves as a **template** for legal drafting projects. All files contain placeholder content that should be replaced with actual case information when starting a new case.

### **Getting Started with a New Case**

1. **Clone or Copy Repository**: Create a new instance for each case
2. **Replace Template Content**: Update all placeholder information with actual case data
3. **Configure Case Information**: Modify `Case_Summary_and_Timeline.md` with real case details
4. **Update Intake Files**: Replace template content in `Intake/` folder with actual client information
5. **Set Up Document Folders**: Create specific document folders in `active_drafts/` as needed

### **Template Files to Customize**

- **`Case_Summary_and_Timeline.md`** - Replace with actual case information
- **`Intake/initial_request.md`** - Replace with real client request
- **`Intake/background_info.md`** - Replace with actual case background
- **`Intake/intake_notes.md`** - Replace with real consultation notes
- **All README files** - Customize for specific case needs

### **Production-Ready Features**

- **Complete Folder Structure**: All necessary folders are pre-created
- **Document Processing System**: Automated PDF parsing and OCR capabilities
- **Exhibit Management**: Three-file system with automated indexing
- **Quality Assurance**: Built-in validation and formatting tools
- **Multi-Format Output**: HTML preview, PDF, and Word document generation

## Current Implementation (v4.0)

**Unified HTML-First Workflow**: Markdown → HTML Preview → PDF & Word Documents

### Simple 3-Step Process
1. **Validate & Fix**: `format_validator.py` + `format_fixer.py`
2. **Preview**: Manual HTML generation → `active_drafts/[draft_type]/html_preview/[document]-preview.html`
3. **Generate**: `generate_final_document.py` → timestamped PDF & Word files

### Key Features
- **Professional Quality**: Browser-based PDF generation, full Word formatting
- **Standardized Outputs**: Single preview location, timestamped finals
- **Universal Support**: Works with complaints, motions, discovery, briefs
- **Application-Friendly**: Simple routing, no file management required

## System Architecture

### Unified HTML-First Approach
The system implements a single, streamlined workflow that generates both PDF and Word documents from the same HTML source:

**Content Flow**: `Markdown Files` → `HTML Preview` → `PDF & Word Documents`

### Core Components
- **Markdown Parser**: Processes content with cross-references and legal formatting
- **HTML Generator**: Creates professional legal document layout
- **PDF Generator**: Browser-based for perfect formatting
- **Word Generator**: Full caption, tables, and legal structure
- **Validation System**: Ensures compliance with legal document standards

## Complete Workflow Process

### **PHASE 1: Content Creation (Markdown)**
**Objective**: Create high-quality legal content without formatting concerns

**User Request Format**:
```
"Let's work on Phase 1 - content creation for [document type].
Focus on the legal arguments without worrying about formatting."
```

**AI Actions**:
1. Generate separate Markdown files for each section
2. Follow Markdown standards from `.augment_guidelines`
3. Focus on legal substance and accuracy
4. Use proper header hierarchy and legal citations

**Output**: Multiple `.md` files following standardized naming (see Folder Structure section)

---

### **PHASE 2: YAML Population (Single Complete File)**
**Objective**: Transfer all content into one complete, structured YAML file

**User Request Format**:
```
"Now let's move to Phase 2. Please create a complete YAML file using
[template_name] and populate it with content from ALL our Markdown files."
```

**AI Actions**:
1. Read ALL existing Markdown files in the project
2. Select appropriate starter template (`complaint_starter.yml`, `motion_starter.yml`, etc.)
3. Populate ONE complete YAML file with all sections
4. Add proper cross-reference labels (`{{LABEL:name}}`)
5. Include all required sections: caption, body, prayer, signature, certificate

**Critical Requirements**:
- ✅ **Single File Output**: One complete YAML file, not separate section files
- ✅ **All Sections Included**: Every part of the document in one file
- ✅ **Cross-Reference Labels**: Proper `{{LABEL:start}}` and `{{REF_RANGE:start:end}}` syntax
- ✅ **Complete Metadata**: All caption, signature, and certificate information

**Output**: One complete `.yml` file ready for document generation

---

### **PHASE 3: Document Generation (Enhanced)**

#### **Option A: HTML → PDF Generation (NEW)**
**Objective**: Convert HTML preview to court-ready PDF

**User Actions**:
```bash
# Install dependencies (one-time setup)
pip install -r draft_system/requirements.txt

# Generate HTML preview from standardized folder
python scripts/complaint_processor.py active_drafts/complaint_case_name/

# Generate PDF from HTML
python scripts/html_to_pdf.py convert complaint_preview.html complaint.pdf
```

**Output**: Court-ready `.pdf` file with perfect formatting

#### **Option B: YAML → Word Generation (EXISTING)**
**Objective**: Convert YAML to professionally formatted Word document

**User Actions**:
```bash
# Generate document
cd draft_system/scripts
python generate_legal_document.py ../active_drafts/complaint_case_name/complaint.yml final_complaint.docx
```

**Output**: Court-ready `.docx` file

#### **Option C: HTML → Word Generation (FUTURE)**
**Objective**: Convert HTML templates to Word documents

**Planned Features**:
- HTML template → Word conversion
- Maintain all formatting standards
- Alternative to YAML-based generation

---

## Quality Assurance Checklist

### **Phase 1 Validation**
- [ ] All required sections have Markdown files
- [ ] Headers follow hierarchy standards (H1 → H2 → H3)
- [ ] Legal citations are properly formatted
- [ ] Content is substantively complete

### **Phase 2 Validation**
- [ ] Single complete YAML file created
- [ ] All Markdown content transferred
- [ ] Cross-reference labels added (`{{LABEL:name}}`)
- [ ] YAML syntax is valid
- [ ] All required sections present

### **Phase 3 Validation**
- [ ] Word document generates without errors
- [ ] Cross-references resolve correctly
- [ ] Formatting meets legal standards
- [ ] All sections appear in proper order
- [ ] Document is court-ready

---

## Error Prevention

### **Common Mistakes to Avoid**
1. **Multiple YAML Files**: Don't create separate YAML files for each section
2. **Missing Cross-References**: Ensure labels and references are properly added
3. **Incomplete Sections**: Include ALL document parts in the single YAML file
4. **YAML Syntax Errors**: Validate indentation and quotes
5. **Missing Dependencies**: Install required Python packages

### **Validation Commands**
```bash
# Test YAML syntax
python -c "import yaml; yaml.safe_load(open('active_drafts/complaint_case_name/complaint.yml'))"

# Test document generation
python generate_legal_document.py active_drafts/complaint_case_name/complaint.yml test_output.docx

# Test HTML preview generation
python scripts/complaint_processor.py active_drafts/complaint_case_name/
```

## YAML Syntax Guide

### Basic Content
```yaml
- type: 'paragraph'
  data: "This is a standard paragraph."
```

### Multi-line Paragraphs
```yaml
- type: 'paragraph'
  data: >
    This is a long paragraph that spans
    multiple lines but renders as a single
    paragraph in the final document.
```

### Lists
```yaml
- type: 'list'
  data:
    style: 'numbered'  # or 'bullet', 'lettered'
    items:
      - "First item"
      - "Second item"
      - "Third item"
```

### Formatting Within Text
```yaml
- type: 'paragraph'
  data: "Pursuant to **O.C.G.A. § 9-11-55(b)**, the *defendant* must respond."
```

### Cross-References
```yaml
# Create labels (invisible in final document)
- type: 'paragraph'
  data: '{{LABEL:facts_start}}This is the first fact paragraph.'

- type: 'paragraph'
  data: 'This is the last fact paragraph.{{LABEL:facts_end}}'

# Reference the labeled range
- type: 'paragraph'
  data: 'Plaintiff realleges paragraphs {{REF_RANGE:facts_start:facts_end}}.'
```

## Document Types

### Complaints/Pleadings
- Numbered paragraphs throughout
- Standard sections: Parties, Jurisdiction, Facts, Counts, Prayer
- Cross-references between sections

### Motions
- Unnumbered paragraphs (typically)
- Standard sections: Introduction, Facts, Legal Standard, Argument, Conclusion
- Lettered sub-arguments (A, B, C)

### Discovery Documents
- Numbered requests/interrogatories
- Standard sections: Instructions, Definitions, Requests
- Detailed definitions section

### Affidavits
- Numbered paragraphs
- Personal knowledge statements
- Notarization block

### Briefs
- Complex heading hierarchy (I, A, 1, a)
- Table of contents and authorities (auto-generated)
- Statement of issues, facts, argument, conclusion

## Best Practices

### Content Creation (Phase 1)
1. Focus solely on legal substance and arguments
2. Don't worry about paragraph numbers or formatting
3. Create comprehensive, well-researched content
4. Use clear, professional legal writing

### Structure Population (Phase 2)
1. Use the exact starter template structure
2. Don't modify template sections or hierarchy
3. Follow YAML syntax precisely
4. Include all required labels and references

### Quality Control
1. Validate YAML syntax before processing
2. Ensure all cross-references are properly labeled
3. Verify all required sections are populated
4. Check that formatting markup is correct

## Troubleshooting

### Common Issues
- **Invalid YAML**: Check indentation and syntax
- **Missing cross-references**: Ensure labels match references exactly
- **Formatting errors**: Verify Markdown syntax within YAML strings
- **Missing sections**: Check template requirements

### Validation
Each template includes validation rules:
```yaml
validation:
  required_sections:
    - "INTRODUCTION"
    - "LEGAL STANDARD"
  max_heading_levels: 3
```

## Standardized Folder Structure and Naming Conventions

### **Active Drafts Organization**

The `active_drafts/` folder contains all documents currently being worked on or planned for work, organized according to standardized conventions to ensure consistency, scalability, and multi-tenant compatibility.

#### **Document Folder Naming Convention**
```
Format: {document_type}_{document_name}
```

**Document Types:**
- `complaint` - Initial pleadings and complaints
- `response_to_complaint` - Answers, motions to dismiss, etc.
- `motion` - All types of motions (compel, summary judgment, etc.)
- `interrogatories` - Discovery interrogatories
- `requests_for_production` - Document production requests
- `requests_for_admission` - Admission requests
- `affidavit` - Sworn statements and affidavits
- `brief` - Legal briefs and memoranda
- `discovery` - General discovery documents
- `settlement` - Settlement agreements and negotiations
- `appeal` - Appellate documents

**Document Name Guidelines:**
- Use underscores or dashes to connect words
- Keep names descriptive but concise
- Include case-specific identifiers when helpful

**Examples:**
```
complaint_hilton_timeshare
motion_compel_discovery
interrogatories_first_set
brief_summary_judgment
affidavit_damages_expert
response_to_complaint_hilton
```

#### **Required Subfolder Structure**

Each document folder must contain the following standardized subfolders:

```
{document_type}_{document_name}/
├── draft_content/              # Primary markdown files for document generation
├── research/                   # Legal research and analysis
├── exhibits/                   # Document exhibits and supporting materials
├── reference_material/         # Additional reference documents
├── case_documents/            # Filed motions, orders, and docket documents
└── metadata.yml               # Document metadata and configuration
```

**Subfolder Purposes:**

- **`draft_content/`**: Contains the actual markdown files used for document generation
- **`research/`**: Legal research, case law analysis, statutory research
- **`exhibits/`**: Supporting documents, evidence, contracts, correspondence
- **`reference_material/`**: Background materials, similar cases, templates
- **`case_documents/`**: Filed documents, court orders, opposing party filings
- **`metadata.yml`**: Document configuration, court information, party details

#### **Draft Content Template Files**

The `draft_content/` folder contains standardized markdown files with consistent naming:

**For Complaints and Pleadings:**
```
01_caption_and_parties.md       # Court caption and party information
02_jurisdiction_and_venue.md    # Jurisdictional allegations
03_factual_allegations.md       # Statement of facts
04_count_i_[claim_type].md      # First cause of action
05_count_ii_[claim_type].md     # Second cause of action
06_count_iii_[claim_type].md    # Additional causes of action
07_prayer_for_relief.md         # Relief requested
08_jury_demand.md               # Jury trial demand (if applicable)
```

**For Motions:**
```
01_caption_and_title.md         # Court caption and motion title
02_introduction.md              # Motion introduction
03_statement_of_facts.md        # Factual background
04_legal_standard.md            # Applicable legal standard
05_argument.md                  # Legal argument
06_conclusion.md                # Conclusion and prayer for relief
```

**For Discovery Documents:**
```
01_caption_and_title.md         # Court caption and document title
02_instructions.md              # General instructions
03_definitions.md               # Definitions section
04_requests.md                  # Actual requests/interrogatories
```

**For Briefs:**
```
01_caption_and_title.md         # Court caption and brief title
02_table_of_contents.md         # Table of contents (auto-generated)
03_table_of_authorities.md      # Table of authorities (auto-generated)
04_statement_of_issues.md       # Issues presented
05_statement_of_facts.md        # Statement of facts
06_argument.md                  # Legal argument
07_conclusion.md                # Conclusion
```

### **Global Case Resources Structure**

Resources that apply to the entire case should be organized outside individual document folders:

```
case_resources/
├── court_rules/               # Local court rules and procedures
├── case_law/                  # Relevant case law and precedents
├── statutes/                  # Applicable statutes and regulations
├── expert_reports/            # Expert witness reports and materials
├── discovery_materials/       # Master discovery index and materials
├── settlement_communications/ # Settlement negotiations and offers
└── case_timeline.md          # Chronological case timeline
```

### **Clean File Structure**
```
draft_system/
├── .augment_guidelines          # AI behavior guidelines (unified standards)
├── README.md                    # This file
├── requirements.txt             # Python dependencies
├── Case_Summary_and_Timeline.md # Template case summary (replace with actual case data)
├── Intake/                     # Template intake folder
│   ├── initial_request.md      # Template initial request
│   ├── background_info.md      # Template background information
│   ├── intake_notes.md         # Template intake notes
│   └── preliminary_docs/       # Folder for uploaded documents
├── active_drafts/              # All active document work
│   └── README.md               # Instructions for document organization
├── case_resources/             # Global case resources
│   ├── court_rules/            # Local court rules and procedures
│   ├── case_law/               # Relevant case law and precedents
│   ├── statutes/               # Applicable statutes and regulations
│   ├── expert_reports/         # Expert witness reports and materials
│   ├── discovery_materials/    # Master discovery index and materials
│   ├── settlement_communications/ # Settlement negotiations and offers
│   ├── case_timeline.md        # Chronological case timeline
│   └── README.md               # Case resources instructions
├── exhibits_master/            # Master exhibits with three-file system
│   ├── exhibit_index.json      # Automated exhibit tracking
│   ├── exhibit_index_template.json # Template for exhibit index
│   └── README.md               # Exhibit management instructions
├── standards/                  # Unified formatting standards
│   ├── markdown_formatting_guide.md
│   ├── validation_rules.yml
│   └── document_type_specifications.yml
├── schema/
│   └── master_schema.yml       # Universal YAML schema
├── templates/
│   ├── yaml/                   # YAML templates for Word generation
│   │   ├── complaint_starter.yml
│   │   ├── motion_starter.yml
│   │   └── discovery_starter.yml
│   ├── html/                   # HTML templates for preview/PDF
│   │   ├── complaint.html
│   │   └── motion.html
│   └── Case_Summary_and_Timeline_Template.md  # Case tracking template
├── scripts/                    # Core processing tools
│   ├── universal_markdown_parser.py     # Unified parser for all documents
│   ├── universal_preview_generator.py   # DEPRECATED - Manual HTML generation used instead
│   ├── generate_final_document.py       # Final PDF/Word document generator
│   ├── format_validator.py              # Validation against standards
│   ├── format_fixer.py                 # Automatic formatting fixes
│   ├── complaint_processor.py           # Complaint-specific HTML generator
│   ├── html_to_pdf.py                  # HTML to PDF conversion
│   ├── generate_legal_document.py       # YAML to Word converter
│   ├── document_processor.py            # Document processing and OCR system
│   ├── exhibit_manager.py               # Exhibit management system
│   └── workflow_manager.py              # User onboarding and workflow management
├── html_preview/               # DEPRECATED - Individual draft types now have their own html_preview folders
│   └── README.md               # Migration instructions
├── final_documents/            # Generated final documents
│   ├── README.md               # Final documents instructions
│   └── [timestamped files]     # PDF and Word documents with timestamps
└── logs/                       # System logs (created automatically)
    └── document_processing.log # Document processing activity log
```

### **Case Management Structure**
For complete case management, organize each case with this structure:

```
case_name/
├── Intake/                     # Preliminary documents and user information
│   ├── initial_request.md      # User's initial description/request
│   ├── background_info.md      # Background information provided
│   ├── preliminary_docs/       # Any initial documents from user
│   └── intake_notes.md         # Notes from initial consultation
├── Case_Summary_and_Timeline.md # Living document tracking entire case
├── complaint_document_name/     # Individual document folders
├── motion_document_name/        # Individual document folders
└── discovery_document_name/     # Individual document folders
```

#### **Intake Folder Purpose**
The `Intake/` folder serves as the collection point for all preliminary case information:
- **Initial User Requests**: What the user wants to accomplish
- **Background Information**: Context and history provided by user
- **Preliminary Documents**: Any existing documents user provides
- **Intake Notes**: Questions, clarifications, and initial analysis

#### **Case Summary and Timeline**
The `Case_Summary_and_Timeline.md` file serves as the central reference point for the entire case:
- **Case Overview**: Basic case information and current status
- **Key Parties**: All parties and their contact information
- **Timeline**: Chronological record of all case events
- **Next Steps**: Current action items and deadlines
- **Legal Issues**: Summary of claims, defenses, and key legal questions
- **Agent Context**: Important notes for AI agents to understand case context

**Purpose**: Allows agents to quickly understand the entire case context without needing to pull information from multiple files.

### **Metadata Configuration**

Each document folder includes a `metadata.yml` file containing:

```yaml
document_info:
  type: "complaint"
  name: "hilton_timeshare"
  title: "Complaint for Damages"
  status: "draft"  # draft, review, final, filed
  created_date: "2024-12-01"
  last_modified: "2024-12-15"

court_info:
  court_name: "District Court of Clark County"
  jurisdiction: "State of Nevada"
  case_number: "[TO BE ASSIGNED]"
  judge: ""

parties:
  plaintiff:
    name: "Ian Bruce"
    role: "Pro Se"
    address: "7219 Laurel Creek Dr., Stockbridge, GA 30281"
    phone: "(404) 555-1212"
    email: "ib708090@gmail.com"
  defendants:
    - name: "Hilton Resorts Corporation"
      type: "corporation"
      state: "Delaware"
    - name: "Hilton Grand Vacations Inc."
      type: "corporation"
      state: "Delaware"

workflow:
  current_phase: "content_creation"  # content_creation, review, formatting, filing
  target_format: "pdf"  # html, pdf, word
  cross_references: true

generation_options:
  numbered_paragraphs: true
  double_spaced: true
  font_family: "Times New Roman"
  font_size: 14
  margins: "1 inch"
```

### **Organizational Rules and Best Practices**

#### **File Naming Conventions**

1. **Markdown Files**: Use numbered prefixes for proper ordering
   - Format: `##_descriptive_name.md`
   - Example: `01_caption_and_parties.md`

2. **Research Files**: Include date and topic
   - Format: `YYYY-MM-DD_topic.md`
   - Example: `2024-12-01_trid_violations.md`

3. **Exhibit Files**: Use exhibit numbers or letters
   - Format: `exhibit_[number]_description.pdf`
   - Example: `exhibit_a_purchase_agreement.pdf`

4. **Case Documents**: Include filing date and document type
   - Format: `YYYY-MM-DD_document_type.pdf`
   - Example: `2024-11-15_motion_to_dismiss.pdf`

#### **Version Control Guidelines**

1. **Draft Versions**: Use semantic versioning in metadata
   - `v1.0` - Initial draft
   - `v1.1` - Minor revisions
   - `v2.0` - Major restructuring

2. **Backup Strategy**: Maintain previous versions in `archive/` subfolder

3. **Change Tracking**: Document significant changes in `CHANGELOG.md`

#### **Multi-Tenant Considerations**

1. **Case Isolation**: Each case should have its own `draft_system/` instance
2. **Template Sharing**: Common templates can be shared across cases
3. **User Permissions**: Implement folder-level access controls
4. **Audit Trail**: Track document access and modifications

#### **Automation Rules**

1. **Auto-Generation**: New document folders should auto-create required subfolders
2. **Template Population**: Automatically populate metadata.yml with defaults
3. **Cross-Reference Validation**: Verify all references resolve correctly
4. **Format Consistency**: Enforce naming conventions through validation scripts

#### **Quality Assurance Standards**

1. **Required Files**: Each document must have complete draft_content files
2. **Metadata Validation**: Ensure all required metadata fields are populated
3. **Cross-Reference Integrity**: Verify all `{{LABEL:}}` and `{{REF:}}` tags resolve
4. **Format Compliance**: Ensure generated documents meet court formatting requirements

#### **Scalability Features**

1. **Modular Design**: Each document type has independent processing logic
2. **Template Extensibility**: Easy to add new document types and templates
3. **Plugin Architecture**: Support for custom processing modules
4. **Batch Processing**: Ability to process multiple documents simultaneously

## HTML-Based Document System (NEW)

### Quick Start with HTML System

#### 1. Generate Sample Preview
```bash
python demo_html_system.py
```
This creates a sample motion preview and opens it in your browser.

#### 2. Preview from Document Folder
```bash
python scripts/complaint_processor.py active_drafts/complaint_case_name/
```

#### 3. Generate PDF from Document Folder
```bash
# First generate HTML preview, then convert to PDF
python scripts/complaint_processor.py active_drafts/complaint_case_name/
python scripts/html_to_pdf.py convert complaint_preview.html case_complaint.pdf
```

### HTML System Benefits

1. **Instant Preview**: See formatted documents immediately in browser
2. **Perfect Formatting**: CSS ensures exact legal document standards
3. **Cross-Reference Compatibility**: Works with existing `{{LABEL:}}` system
4. **Multi-Format Output**: Generate HTML, PDF, and Word documents
5. **Print-Ready**: Browser print function produces court-ready documents
6. **Template-Based**: Easy to customize for different document types

### HTML Template Features

- **Legal Caption Structure**: Split table with proper court formatting
- **Professional Typography**: Times New Roman, 14pt, double-spaced
- **Exact Margins**: 1-inch margins enforced via CSS `@page` rules
- **Page Numbering**: Automatic page numbers for print/PDF
- **Cross-References**: Dynamic paragraph reference resolution
- **Signature Blocks**: Properly formatted signature and certificate sections

### Dependencies for HTML System

```bash
# Core HTML template engine
pip install jinja2

# PDF generation (choose one)
pip install weasyprint          # Recommended for legal documents
pip install playwright          # Alternative option

# Install all dependencies
pip install -r requirements.txt
```

### **Additional Recommendations for Framework Improvement**

#### **Security and Access Control**
1. **Document Encryption**: Sensitive case materials should be encrypted at rest
2. **Access Logging**: Track who accesses which documents and when
3. **Permission Levels**: Implement role-based access (attorney, paralegal, client)
4. **Secure Sharing**: Encrypted sharing mechanisms for external collaboration

#### **Integration Capabilities**
1. **Case Management Systems**: Integration with popular legal case management software
2. **Court Filing Systems**: Direct integration with electronic filing systems
3. **Document Management**: Integration with legal document management platforms
4. **Time Tracking**: Automatic time tracking for document work

#### **Advanced Features**
1. **AI-Powered Suggestions**: Intelligent content suggestions based on document type
2. **Citation Validation**: Automatic verification of legal citations
3. **Conflict Checking**: Automated conflict of interest checking
4. **Deadline Management**: Integration with court deadlines and calendar systems

#### **Collaboration Features**
1. **Real-Time Editing**: Multiple users editing documents simultaneously
2. **Comment System**: Inline comments and review workflows
3. **Approval Workflows**: Structured review and approval processes
4. **Version Comparison**: Visual diff tools for document versions

#### **Reporting and Analytics**
1. **Document Statistics**: Track document creation, modification, and filing metrics
2. **Workflow Analytics**: Identify bottlenecks in document preparation
3. **Quality Metrics**: Track formatting compliance and error rates
4. **Time Analysis**: Analyze time spent on different document types

#### **Mobile and Cloud Support**
1. **Mobile Access**: Responsive design for tablet and phone access
2. **Cloud Synchronization**: Automatic backup and synchronization
3. **Offline Capability**: Work on documents without internet connection
4. **Cross-Platform**: Support for Windows, Mac, and Linux environments

#### **Compliance and Standards**
1. **Court Rule Compliance**: Automatic checking against local court rules
2. **Accessibility Standards**: Ensure documents meet ADA compliance requirements
3. **Professional Standards**: Adherence to legal profession formatting standards
4. **Audit Trails**: Complete audit trails for regulatory compliance

#### **Performance and Scalability**
1. **Large Document Handling**: Efficient processing of complex, multi-hundred-page documents
2. **Batch Operations**: Process multiple documents simultaneously
3. **Caching Systems**: Intelligent caching for faster document generation
4. **Load Balancing**: Support for high-volume, multi-user environments

## Quick Reference

### For AI Agents
**MUST READ FIRST**: `.augment_guidelines` - Complete agent behavior rules and system guidelines

### For Users
**Primary Documentation**: This README provides complete workflow and usage instructions

### For Developers
**Technical Details**: `html_integration_plan.md` and individual script documentation

## Support

For issues or questions:
1. **Agents**: Follow `.augment_guidelines` for all system interactions
2. **Users**: Check this README for workflow guidance and examples
3. **Validation**: Run format_validator.py to identify specific issues
4. **Standards**: Review `standards/markdown_formatting_guide.md` for formatting rules
5. **Dependencies**: Run `python demo_html_system.py check` to verify system setup

## Document Processing and Exhibit Management

### **Document Processing System**

The draft_system includes a comprehensive document processing system for handling uploaded files:

#### **Automated Document Processing**
```bash
# Process a single document
python scripts/document_processor.py path/to/document.pdf

# Process with specific destination
python scripts/document_processor.py path/to/document.pdf exhibits_master/
```

#### **Two-Tier Processing System**
1. **Primary**: PDF-to-text extraction for text-based PDFs
2. **Fallback**: Tesseract OCR when text extraction fails or returns insufficient text
3. **Image Processing**: Direct OCR for image files (JPG, PNG, TIFF, etc.)

#### **Three-File System**
Each processed document creates:
- **Original File**: `document_name_original.ext` - Preserved unchanged
- **Text File**: `document_name_text.txt` - Extracted/parsed text
- **Summary File**: `document_name_summary.md` - Analysis and description

### **Exhibit Management System**

#### **Master Exhibits Organization**
```bash
# Create new exhibit
python scripts/exhibit_manager.py create path/to/file.pdf "Contract Agreement"

# List all exhibits
python scripts/exhibit_manager.py list

# Get exhibit information
python scripts/exhibit_manager.py info A

# Generate exhibit list for court
python scripts/exhibit_manager.py generate-list exhibit_list.md
```

#### **Exhibit Naming Convention**
- **Format**: `exhibit_[letter]_[description]_[type].[ext]`
- **Examples**:
  - `exhibit_a_contract_original.pdf`
  - `exhibit_a_contract_text.txt`
  - `exhibit_a_contract_summary.md`

#### **Exhibit Index Management**
- Automatic exhibit letter assignment (A, B, C, ..., Z, AA, AB, etc.)
- JSON-based index tracking (`exhibits_master/exhibit_index.json`)
- Cross-referencing with case documents
- Status tracking (created, processed, reviewed, filed, admitted)

## Complete Document Generation Workflow

The draft_system provides a streamlined, professional legal document generation system with three simple steps:

### **Step 1: Validate and Fix Formatting**
```bash
# Activate virtual environment (required for all commands)
source venv/bin/activate

# Validate document formatting against unified standards
python scripts/format_validator.py active_drafts/complaint_case_name/ standard

# Auto-fix common formatting issues
python scripts/format_fixer.py active_drafts/complaint_case_name/

# Re-validate to confirm fixes
python scripts/format_validator.py active_drafts/complaint_case_name/ standard
```

### **Step 2: Generate HTML Preview**
```bash
# DEPRECATED: Use manual HTML generation instead
# AI agent creates HTML previews in: active_drafts/[draft_type]/html_preview/
```
**New Output**: `active_drafts/[draft_type]/html_preview/[document]-preview.html`

### **Step 3: Generate Final Documents**
```bash
# Generate both PDF and Word documents (recommended)
python scripts/generate_final_document.py active_drafts/complaint_case_name/ both

# Or generate specific formats:
python scripts/generate_final_document.py active_drafts/complaint_case_name/ pdf
python scripts/generate_final_document.py active_drafts/complaint_case_name/ docx
```
**Output**: `final_documents/document_name_YYYYMMDD_HHMMSS.pdf` and `.docx` (timestamped, preserved)

### **Standards Documentation**
- **Complete Guide**: `standards/markdown_formatting_guide.md`
- **Validation Rules**: `standards/validation_rules.yml`
- **Document Specifications**: `standards/document_type_specifications.yml`

### **System Architecture**

The draft_system implements a **unified HTML-first approach**:

1. **Markdown Content** → **HTML Preview** → **PDF & Word Documents**
2. **Single Preview Location**: `html_preview/draft-preview.html` (application-friendly)
3. **Timestamped Finals**: `final_documents/name_YYYYMMDD_HHMMSS.{pdf,docx}` (preserved)

### **Key Features**

#### **Standardized Output Locations**
- **HTML Preview**: Always `html_preview/draft-preview.html` (overwritten)
- **Final Documents**: Always `final_documents/` with timestamps (preserved)
- **No File Management**: System handles all naming and organization

#### **Professional Quality**
- **PDF**: Browser-based generation for perfect formatting
- **Word**: Full caption, proper tables, Times New Roman, 1-inch margins
- **Consistent**: All formats match HTML preview exactly

#### **Application Integration**
- **Simple Routing**: `/preview` always points to same file
- **Universal Support**: Works with any document type
- **No Tracking**: No need to manage different output filenames

### **Complete Example Workflow**

```bash
# Activate virtual environment
source venv/bin/activate

# 1. Validate and fix formatting
python scripts/format_validator.py active_drafts/complaint_hilton_timeshare/ standard
python scripts/format_fixer.py active_drafts/complaint_hilton_timeshare/

# 3. Generate final documents
python scripts/generate_final_document.py active_drafts/complaint_hilton_timeshare/ both
# → final_documents/complaint_hilton_timeshare_20241215_143022.pdf
# → final_documents/complaint_hilton_timeshare_20241215_143022.docx
```

### **Output Specifications**

#### **HTML Preview**
- **Location**: `active_drafts/[draft_type]/html_preview/[document]-preview.html`
- **Behavior**: Created within individual draft type folders
- **Purpose**: Review and application integration
- **Structure**: Each draft type has its own html_preview subfolder
- **Naming**: Descriptive names (e.g., motion-preview.html, complaint-preview.html)
- **Deprecated**: Root-level `html_preview/` folder is no longer used

#### **Final Documents**
- **Location**: `final_documents/`
- **Naming**: `{document_type}_{name}_{YYYYMMDD_HHMMSS}.{pdf,docx}`
- **Behavior**: Timestamped, never overwritten
- **Quality**: Court-ready, professional formatting

## Version History

- v1.0: Initial release with core document types and YAML schema
- v2.0: Added HTML-based preview and generation system
- v3.0: Implemented unified markdown formatting standards with validation and auto-fixing
- v4.0: **CURRENT** - Streamlined HTML-first workflow with browser PDF generation and enhanced Word output
